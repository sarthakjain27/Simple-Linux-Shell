
This directory contains the files you will need for the CS:APP Shell
Lab.

tsh.c
        This is the file you will be modifying.

The main functions in the tsh.c file are:

1. eval: Main routine that parses, interprets, and executes the command line. 

2. sigchld handler: Handles SIGCHLD signals. 

3. sigint handler: Handles SIGINT signals (sent by Ctrl-C). 

4. sigtstp handler: Handles SIGTSTP signals (sent by Ctrl-Z). 

This shell program supports the following built-in commands

tsh should support the following built-in commands:

– The quit command terminates the shell.
– The jobs command lists all background jobs.
– The bg job command restarts job by sending it a SIGCONT signal, and then runs it in the background. The job argument can be either a PID or a JID.
– The fg job command restarts job by sending it a SIGCONT signal, and then runs it in the foreground. The job argument can be either a PID or a JID.

When you wish to test your shell, type make to recompile it. To run it, type tsh to the command line:
linux> ./tsh
tsh> [type commands to your shell here]



#########################################
# You shouldn't modify any of these files
#########################################
tsh_helper.{c,h}
        Implements some of the utility routines you will need

csapp.{c,h}
        Utility files used in CS:APP textbook.  These included wrapped
        versions of a number of system functions, plus the SIO safe I/O library

tshref*
        This is the reference shell executable

sdriver.c
        The shell driver source program

runtrace.c
        The trace interpreter source program

trace{00-29}.txt
        Trace files used by the driver

config.h
        Header file for sdriver.c

wrapper.c
        Utility file used to make races more likely

mycat.c
myenv.c
myintp.c
myints.c
mykill.pl
myspin1.c
myspin2.c
mysplit.c
mysplitp.c
mytstpp.c
mytstps.c
mysleepnprint.c
	These are helper programs that are referenced in the trace files.

Makefile:
        This is the makefile that builds the driver program.



